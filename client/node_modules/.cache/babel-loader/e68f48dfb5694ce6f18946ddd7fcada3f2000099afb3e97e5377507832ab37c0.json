{"ast":null,"code":"var _jsxFileName = \"/Users/priyamshah/Documents/ITCS 6112 - Software Systems Design & Implementation/vital_tech/client/src/components/Dashboard/Dashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function Dashboard() {\n//     const [images, setImages] = useState([]);\n//     const [file, setFile] = useState(null);\n\n//     useEffect(() => {\n//         fetchImages();\n//     }, []);\n\n//     const fetchImages = async () => {\n//         const { data } = await axios.get('http://localhost:5001/api/user/getImages');\n//         setImages(data);\n//     };\n\n//     const handleFileChange = (e) => {\n//         setFile(e.target.files[0]);\n//     };\n\n//     const handleUpload = async () => {\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         formData.append('patientId', '661f1c830c9e0aaacf0b5bce');\n\n//         try {\n//             await axios.post('http://localhost:5001/api/user/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data'\n//                 }\n//             });\n//             fetchImages(); // Refresh the list after upload\n//         } catch (error) {\n//             console.error('Error uploading the image:', error.response);\n//         }\n//     };\n\n//     const handleCommentSubmit = async (imageId, comment) => {\n//         try {\n//             await axios.post(`http://localhost:5001/api/user/images/${imageId}/comments`, { text: comment, userId: '661f1c830c9e0aaacf0b5bce'});\n//             fetchImages(); // Refresh the comments\n//         } catch (error) {\n//             console.error('Error posting comment:', error.response);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Dashboard</h1>\n//             <input type=\"file\" onChange={handleFileChange} id=\"image\" name='image' />\n//             <button onClick={handleUpload}>Upload Image</button>\n\n//             {images.map((image) => (\n//                 <div key={image._id}>\n//                     <img src={image.base64Image} alt=\"Uploaded B64\" />\n//                     {image.comments.map((comment) => (\n//                         <p key={comment._id}>{comment.body}</p>\n//                     ))}\n//                     <CommentForm imageId={image._id} onCommentSubmit={handleCommentSubmit} />\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// function CommentForm({ imageId, onCommentSubmit }) {\n//     const [comment, setComment] = useState('');\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         onCommentSubmit(imageId, comment);\n//         setComment('');\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <input type=\"text\" value={comment} onChange={(e) => setComment(e.target.value)} />\n//             <button type=\"submit\">Add Comment</button>\n//         </form>\n//     );\n// }\n\n// export default Dashboard;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function Dashboard() {\n//     const [images, setImages] = useState([]);\n//     const [file, setFile] = useState(null);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         fetchImages();\n//     }, []);\n\n//     const fetchImages = async () => {\n//         setIsLoading(true);\n//         try {\n//             const { data } = await axios.get('http://localhost:5001/api/user/getImages');\n//             setImages(data);\n//             setError('');\n//         } catch (error) {\n//             setError('Failed to fetch images');\n//             console.error('Fetch images error:', error.response);\n//         }\n//         setIsLoading(false);\n//     };\n\n//     const handleFileChange = (e) => {\n//         setFile(e.target.files[0]);\n//     };\n\n//     const handleUpload = async () => {\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         formData.append('patientId', '661f1c830c9e0aaacf0b5bce');\n\n//         setIsLoading(true);\n//         try {\n//             await axios.post('http://localhost:5001/api/user/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data'\n//                 }\n//             });\n//             // await axios.post('http://localhost:5000/', formData, {\n//             //     headers: {\n//             //         'Content-Type': 'multipart/form-data'\n//             //     }\n//             // });\n//             formData.append('image', file);\n\n//             fetch('http://127.0.0.1:5000/predict', {  // Ensure this URL matches your Flask server's URL\n//                 method: 'POST',\n//                 body: formData  // Sending the image as FormData\n//             })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Network response was not ok: ' + response.statusText);\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) {\n//                     throw new Error('Error from server: ' + data.error);\n//                 }\n//                 console.log('Prediction: ' + data.prediction);\n//             })\n//             .catch((error) => {\n//                 console.error('Error:', error);\n//                 console.log('Error: Could not retrieve prediction. ' + error.message);\n//             });\n//             fetchImages();\n//             setError('');\n//         } catch (error) {\n//             setError('Error uploading the image');\n//             console.error('Upload image error:', error.response);\n//         }\n//         setIsLoading(false);\n//     };\n\n//     const handleCommentSubmit = async (imageId, comment) => {\n//         setIsLoading(true);\n//         try {\n//             await axios.post(`http://localhost:5001/api/user/images/${imageId}/comments`, { text: comment, userId: '661f1c830c9e0aaacf0b5bce'});\n//             fetchImages();\n//             setError('');\n//         } catch (error) {\n//             setError('Error posting comment');\n//             console.error('Post comment error:', error.response);\n//         }\n//         setIsLoading(false);\n//     };\n\n//     if (isLoading) return <p>Loading...</p>;\n//     if (error) return <p>{error}</p>;\n\n//     return (\n//         <div style={{ margin: '20px' }}>\n//             <h1 style={{ textAlign: 'center' }}>Dashboard</h1>\n//             <input type=\"file\" onChange={handleFileChange} id=\"image\" name='image' />\n//             <button onClick={handleUpload} style={{ margin: '10px' }}>Upload Image</button>\n\n//             {images.map((image) => (\n//                 <div key={image._id} style={{ border: '1px solid #ccc', padding: '20px', marginBottom: '10px' }}>\n//                     <img src={image.base64Image} alt=\"Uploaded\" style={{ maxWidth: '100%', marginBottom: '10px' }} />\n//                     <div>\n//                         <h3>Comments</h3>\n//                         {image.comments.map((comment) => (\n//                             <p key={comment._id} style={{ backgroundColor: '#f8f8f8', padding: '8px', borderRadius: '5px', margin: '5px 0' }}>\n//                                 {comment.body}\n//                             </p>\n//                         ))}\n//                         <CommentForm imageId={image._id} onCommentSubmit={handleCommentSubmit} />\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// function CommentForm({ imageId, onCommentSubmit }) {\n//     const [comment, setComment] = useState('');\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         onCommentSubmit(imageId, comment);\n//         setComment('');\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit} style={{ display: 'flex', marginTop: '10px' }}>\n//             <input type=\"text\" value={comment} onChange={(e) => setComment(e.target.value)} placeholder=\"Add a comment...\" style={{ flexGrow: 1, marginRight: '5px' }} />\n//             <button type=\"submit\">Post</button>\n//         </form>\n//     );\n// }\n\n// export default Dashboard;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Layout from '../Layout/Layout';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [file, setFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchImages();\n  }, []);\n  const fetchImages = async () => {\n    setIsLoading(true);\n    try {\n      const {\n        data\n      } = await axios.get('http://localhost:5001/api/user/getImages');\n      setImages(data);\n      // setError('');\n    } catch (error) {\n      // setError('Failed to fetch images');\n      console.error('Fetch images error:', error.response);\n    }\n    setIsLoading(false);\n  };\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('patientId', '661f1c830c9e0aaacf0b5bce');\n\n    // setIsLoading(true);\n    try {\n      await axios.post('http://localhost:5001/api/user/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      formData.append('image', file);\n      fetch('http://127.0.0.1:5000/predict', {\n        // Ensure this URL matches your Flask server's URL\n        method: 'POST',\n        body: formData // Sending the image as FormData\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok: ' + response.statusText);\n        }\n        return response.json();\n      }).then(data => {\n        if (data.error) {\n          throw new Error('Error from server: ' + data.error);\n        }\n        // console.log('Prediction: ' + data.prediction);\n        alert(`Predicted: ${data.prediction}`);\n      }).catch(error => {\n        console.error('Error:', error);\n        console.log('Error: Could not retrieve prediction. ' + error.message);\n      });\n      fetchImages();\n      // setError('');\n    } catch (error) {\n      // setError('Error uploading the image');\n      console.error('Upload image error:', error.response);\n    }\n    // setIsLoading(false);\n  };\n  const handleAnalyze = async image => {\n    if (!image.base64Image) {\n      alert('Please select a file and convert it to base64 first!');\n      return;\n    }\n    try {\n      const response = await fetch('http://127.0.0.1:5000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: image.base64Image\n        })\n      });\n      const result = await response.json();\n      // console.log(result);\n      alert(`Predicted: ${result.prediction}`);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleCommentSubmit = async (imageId, comment) => {\n    // setIsLoading(true);\n    try {\n      await axios.post(`http://localhost:5001/api/user/images/${imageId}/comments`, {\n        text: comment,\n        userId: '661f1c830c9e0aaacf0b5bce'\n      });\n      fetchImages();\n      // setError('');\n    } catch (error) {\n      // setError('Error posting comment');\n      console.error('Post comment error:', error.response);\n    }\n    // setIsLoading(false);\n  };\n\n  // if (isLoading) return <p>Loading...</p>;\n  // if (error) return <p>{error}</p>;\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"dashboard\",\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        id: \"image\",\n        name: \"image\",\n        className: \"input-file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        className: \"btn-upload\",\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 27\n      }, this), images.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image.base64Image,\n          alt: \"Uploaded\",\n          className: \"img-responsive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnalyze(image),\n          className: \"analyze\",\n          style: {\n            margin: '10px'\n          },\n          children: \"Analyze Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 25\n          }, this), image.comments.map(comment => /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"comment\",\n            children: comment.body\n          }, comment._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(CommentForm, {\n            imageId: image._id,\n            onCommentSubmit: handleCommentSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }, this)]\n      }, image._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"Jtc+HaThVHq3/CEELR6OtEJhyEg=\");\n_c = Dashboard;\nfunction CommentForm({\n  imageId,\n  onCommentSubmit\n}) {\n  _s2();\n  const [comment, setComment] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    onCommentSubmit(imageId, comment);\n    setComment('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"comment\",\n      onSubmit: handleSubmit,\n      style: {\n        display: 'flex',\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: comment,\n        onChange: e => setComment(e.target.value),\n        placeholder: \"Add a comment...\",\n        style: {\n          flexGrow: 1,\n          marginRight: '5px',\n          maxLength: '100'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 9\n  }, this);\n}\n_s2(CommentForm, \"vhAvzpEN661Y5K0yhbG0Td/NMg4=\");\n_c2 = CommentForm;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dashboard\");\n$RefreshReg$(_c2, \"CommentForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","Layout","jsxDEV","_jsxDEV","Dashboard","_s","images","setImages","file","setFile","isLoading","setIsLoading","fetchImages","data","get","error","console","response","handleFileChange","e","target","files","handleUpload","formData","FormData","append","post","headers","fetch","method","body","then","ok","Error","statusText","json","alert","prediction","catch","log","message","handleAnalyze","image","base64Image","JSON","stringify","result","handleCommentSubmit","imageId","comment","text","userId","children","className","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","id","name","onClick","map","src","alt","margin","comments","_id","CommentForm","onCommentSubmit","_c","_s2","setComment","handleSubmit","preventDefault","onSubmit","display","marginTop","value","placeholder","flexGrow","marginRight","maxLength","_c2","$RefreshReg$"],"sources":["/Users/priyamshah/Documents/ITCS 6112 - Software Systems Design & Implementation/vital_tech/client/src/components/Dashboard/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function Dashboard() {\n//     const [images, setImages] = useState([]);\n//     const [file, setFile] = useState(null);\n\n//     useEffect(() => {\n//         fetchImages();\n//     }, []);\n\n//     const fetchImages = async () => {\n//         const { data } = await axios.get('http://localhost:5001/api/user/getImages');\n//         setImages(data);\n//     };\n\n//     const handleFileChange = (e) => {\n//         setFile(e.target.files[0]);\n//     };\n\n//     const handleUpload = async () => {\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         formData.append('patientId', '661f1c830c9e0aaacf0b5bce');\n\n//         try {\n//             await axios.post('http://localhost:5001/api/user/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data'\n//                 }\n//             });\n//             fetchImages(); // Refresh the list after upload\n//         } catch (error) {\n//             console.error('Error uploading the image:', error.response);\n//         }\n//     };\n\n//     const handleCommentSubmit = async (imageId, comment) => {\n//         try {\n//             await axios.post(`http://localhost:5001/api/user/images/${imageId}/comments`, { text: comment, userId: '661f1c830c9e0aaacf0b5bce'});\n//             fetchImages(); // Refresh the comments\n//         } catch (error) {\n//             console.error('Error posting comment:', error.response);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Dashboard</h1>\n//             <input type=\"file\" onChange={handleFileChange} id=\"image\" name='image' />\n//             <button onClick={handleUpload}>Upload Image</button>\n\n//             {images.map((image) => (\n//                 <div key={image._id}>\n//                     <img src={image.base64Image} alt=\"Uploaded B64\" />\n//                     {image.comments.map((comment) => (\n//                         <p key={comment._id}>{comment.body}</p>\n//                     ))}\n//                     <CommentForm imageId={image._id} onCommentSubmit={handleCommentSubmit} />\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// function CommentForm({ imageId, onCommentSubmit }) {\n//     const [comment, setComment] = useState('');\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         onCommentSubmit(imageId, comment);\n//         setComment('');\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <input type=\"text\" value={comment} onChange={(e) => setComment(e.target.value)} />\n//             <button type=\"submit\">Add Comment</button>\n//         </form>\n//     );\n// }\n\n// export default Dashboard;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function Dashboard() {\n//     const [images, setImages] = useState([]);\n//     const [file, setFile] = useState(null);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         fetchImages();\n//     }, []);\n\n//     const fetchImages = async () => {\n//         setIsLoading(true);\n//         try {\n//             const { data } = await axios.get('http://localhost:5001/api/user/getImages');\n//             setImages(data);\n//             setError('');\n//         } catch (error) {\n//             setError('Failed to fetch images');\n//             console.error('Fetch images error:', error.response);\n//         }\n//         setIsLoading(false);\n//     };\n\n//     const handleFileChange = (e) => {\n//         setFile(e.target.files[0]);\n//     };\n\n//     const handleUpload = async () => {\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         formData.append('patientId', '661f1c830c9e0aaacf0b5bce');\n\n//         setIsLoading(true);\n//         try {\n//             await axios.post('http://localhost:5001/api/user/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data'\n//                 }\n//             });\n//             // await axios.post('http://localhost:5000/', formData, {\n//             //     headers: {\n//             //         'Content-Type': 'multipart/form-data'\n//             //     }\n//             // });\n//             formData.append('image', file);\n        \n//             fetch('http://127.0.0.1:5000/predict', {  // Ensure this URL matches your Flask server's URL\n//                 method: 'POST',\n//                 body: formData  // Sending the image as FormData\n//             })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error('Network response was not ok: ' + response.statusText);\n//                 }\n//                 return response.json();\n//             })\n//             .then(data => {\n//                 if (data.error) {\n//                     throw new Error('Error from server: ' + data.error);\n//                 }\n//                 console.log('Prediction: ' + data.prediction);\n//             })\n//             .catch((error) => {\n//                 console.error('Error:', error);\n//                 console.log('Error: Could not retrieve prediction. ' + error.message);\n//             });\n//             fetchImages();\n//             setError('');\n//         } catch (error) {\n//             setError('Error uploading the image');\n//             console.error('Upload image error:', error.response);\n//         }\n//         setIsLoading(false);\n//     };\n\n//     const handleCommentSubmit = async (imageId, comment) => {\n//         setIsLoading(true);\n//         try {\n//             await axios.post(`http://localhost:5001/api/user/images/${imageId}/comments`, { text: comment, userId: '661f1c830c9e0aaacf0b5bce'});\n//             fetchImages();\n//             setError('');\n//         } catch (error) {\n//             setError('Error posting comment');\n//             console.error('Post comment error:', error.response);\n//         }\n//         setIsLoading(false);\n//     };\n\n//     if (isLoading) return <p>Loading...</p>;\n//     if (error) return <p>{error}</p>;\n\n//     return (\n//         <div style={{ margin: '20px' }}>\n//             <h1 style={{ textAlign: 'center' }}>Dashboard</h1>\n//             <input type=\"file\" onChange={handleFileChange} id=\"image\" name='image' />\n//             <button onClick={handleUpload} style={{ margin: '10px' }}>Upload Image</button>\n\n//             {images.map((image) => (\n//                 <div key={image._id} style={{ border: '1px solid #ccc', padding: '20px', marginBottom: '10px' }}>\n//                     <img src={image.base64Image} alt=\"Uploaded\" style={{ maxWidth: '100%', marginBottom: '10px' }} />\n//                     <div>\n//                         <h3>Comments</h3>\n//                         {image.comments.map((comment) => (\n//                             <p key={comment._id} style={{ backgroundColor: '#f8f8f8', padding: '8px', borderRadius: '5px', margin: '5px 0' }}>\n//                                 {comment.body}\n//                             </p>\n//                         ))}\n//                         <CommentForm imageId={image._id} onCommentSubmit={handleCommentSubmit} />\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// function CommentForm({ imageId, onCommentSubmit }) {\n//     const [comment, setComment] = useState('');\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         onCommentSubmit(imageId, comment);\n//         setComment('');\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit} style={{ display: 'flex', marginTop: '10px' }}>\n//             <input type=\"text\" value={comment} onChange={(e) => setComment(e.target.value)} placeholder=\"Add a comment...\" style={{ flexGrow: 1, marginRight: '5px' }} />\n//             <button type=\"submit\">Post</button>\n//         </form>\n//     );\n// }\n\n// export default Dashboard;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Layout from '../Layout/Layout';\nimport './Dashboard.css';\n\nfunction Dashboard() {\n    const [images, setImages] = useState([]);\n    const [file, setFile] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    // const [error, setError] = useState('');\n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    const fetchImages = async () => {\n        setIsLoading(true);\n        try {\n            const { data } = await axios.get('http://localhost:5001/api/user/getImages');\n            setImages(data);\n            // setError('');\n        } catch (error) {\n            // setError('Failed to fetch images');\n            console.error('Fetch images error:', error.response);\n        }\n        setIsLoading(false);\n    };\n\n    const handleFileChange = (e) => {\n        setFile(e.target.files[0]);\n    };\n\n    const handleUpload = async () => {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('patientId', '661f1c830c9e0aaacf0b5bce');\n\n        // setIsLoading(true);\n        try {\n            await axios.post('http://localhost:5001/api/user/upload', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            formData.append('image', file);\n        \n            fetch('http://127.0.0.1:5000/predict', {  // Ensure this URL matches your Flask server's URL\n                method: 'POST',\n                body: formData  // Sending the image as FormData\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok: ' + response.statusText);\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (data.error) {\n                    throw new Error('Error from server: ' + data.error);\n                }\n                // console.log('Prediction: ' + data.prediction);\n                alert(`Predicted: ${data.prediction}`);\n\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n                console.log('Error: Could not retrieve prediction. ' + error.message);\n            });\n            fetchImages();\n            // setError('');\n        } catch (error) {\n            // setError('Error uploading the image');\n            console.error('Upload image error:', error.response);\n        }\n        // setIsLoading(false);\n    };\n\n    const handleAnalyze = async (image) => {\n        if (!image.base64Image) {\n            alert('Please select a file and convert it to base64 first!');\n            return;\n        }\n\n        try {\n            const response = await fetch('http://127.0.0.1:5000/predict', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ image: image.base64Image }),\n            });\n\n            const result = await response.json();\n            // console.log(result);\n            alert(`Predicted: ${result.prediction}`);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const handleCommentSubmit = async (imageId, comment) => {\n        // setIsLoading(true);\n        try {\n            await axios.post(`http://localhost:5001/api/user/images/${imageId}/comments`, { text: comment, userId: '661f1c830c9e0aaacf0b5bce'});\n            fetchImages();\n            // setError('');\n        } catch (error) {\n            // setError('Error posting comment');\n            console.error('Post comment error:', error.response);\n        }\n        // setIsLoading(false);\n    };\n\n    // if (isLoading) return <p>Loading...</p>;\n    // if (error) return <p>{error}</p>;\n\n    return (\n        <Layout>\n        <div className=\"lay\">\n            <h1 className='dashboard' style={{ textAlign: 'center' }}>Dashboard</h1>\n            <input type=\"file\" onChange={handleFileChange} id=\"image\" name='image' className=\"input-file\" />\n            <button onClick={handleUpload} className=\"btn-upload\">Upload Image</button>\n            {isLoading && <p>Loading...</p>}\n            {images.map((image) => (\n                <div key={image._id} className=\"card\">\n                    <img src={image.base64Image} alt=\"Uploaded\" className=\"img-responsive\" />\n                    <button onClick={() => handleAnalyze(image)} className=\"analyze\" style={{ margin: '10px' }}>Analyze Image</button>\n                    <div className=\"comments-section\">\n                        <h3>Comments</h3>\n                        {image.comments.map((comment) => (\n                            <p key={comment._id} className=\"comment\">\n                                {comment.body}\n                            </p>\n                        ))}\n                        <CommentForm imageId={image._id} onCommentSubmit={handleCommentSubmit} />\n                    </div>\n                </div>\n            ))}\n        </div>\n        </Layout>\n    );\n}\n\nfunction CommentForm({ imageId, onCommentSubmit }) {\n    const [comment, setComment] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onCommentSubmit(imageId, comment);\n        setComment('');\n    };\n\n    return (\n        <div>\n        <form id='comment' onSubmit={handleSubmit} style={{ display: 'flex', marginTop: '10px'}}>\n            <input type=\"text\" value={comment} onChange={(e) => setComment(e.target.value)} placeholder=\"Add a comment...\" style={{ flexGrow: 1, marginRight: '5px',maxLength:'100' }} />\n            <button type=\"submit\">Post</button>\n        </form>\n        </div>\n    );\n}\n\nexport default Dashboard;"],"mappings":";;;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}